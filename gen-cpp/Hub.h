/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Hub_H
#define Hub_H

#include <thrift/TDispatchProcessor.h>
#include "hub_types.h"

namespace mp3 {

class HubIf {
 public:
  virtual ~HubIf() {}
  virtual void join(const int16_t port) = 0;
  virtual void leave(const int16_t port) = 0;
  virtual void getMembers(std::vector<int16_t> & _return) = 0;
};

class HubIfFactory {
 public:
  typedef HubIf Handler;

  virtual ~HubIfFactory() {}

  virtual HubIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HubIf* /* handler */) = 0;
};

class HubIfSingletonFactory : virtual public HubIfFactory {
 public:
  HubIfSingletonFactory(const boost::shared_ptr<HubIf>& iface) : iface_(iface) {}
  virtual ~HubIfSingletonFactory() {}

  virtual HubIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HubIf* /* handler */) {}

 protected:
  boost::shared_ptr<HubIf> iface_;
};

class HubNull : virtual public HubIf {
 public:
  virtual ~HubNull() {}
  void join(const int16_t /* port */) {
    return;
  }
  void leave(const int16_t /* port */) {
    return;
  }
  void getMembers(std::vector<int16_t> & /* _return */) {
    return;
  }
};

typedef struct _Hub_join_args__isset {
  _Hub_join_args__isset() : port(false) {}
  bool port;
} _Hub_join_args__isset;

class Hub_join_args {
 public:

  Hub_join_args() : port(0) {
  }

  virtual ~Hub_join_args() throw() {}

  int16_t port;

  _Hub_join_args__isset __isset;

  void __set_port(const int16_t val) {
    port = val;
  }

  bool operator == (const Hub_join_args & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const Hub_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hub_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hub_join_pargs {
 public:


  virtual ~Hub_join_pargs() throw() {}

  const int16_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hub_leave_args__isset {
  _Hub_leave_args__isset() : port(false) {}
  bool port;
} _Hub_leave_args__isset;

class Hub_leave_args {
 public:

  Hub_leave_args() : port(0) {
  }

  virtual ~Hub_leave_args() throw() {}

  int16_t port;

  _Hub_leave_args__isset __isset;

  void __set_port(const int16_t val) {
    port = val;
  }

  bool operator == (const Hub_leave_args & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const Hub_leave_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hub_leave_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hub_leave_pargs {
 public:


  virtual ~Hub_leave_pargs() throw() {}

  const int16_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hub_getMembers_args {
 public:

  Hub_getMembers_args() {
  }

  virtual ~Hub_getMembers_args() throw() {}


  bool operator == (const Hub_getMembers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hub_getMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hub_getMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hub_getMembers_pargs {
 public:


  virtual ~Hub_getMembers_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hub_getMembers_result__isset {
  _Hub_getMembers_result__isset() : success(false) {}
  bool success;
} _Hub_getMembers_result__isset;

class Hub_getMembers_result {
 public:

  Hub_getMembers_result() {
  }

  virtual ~Hub_getMembers_result() throw() {}

  std::vector<int16_t>  success;

  _Hub_getMembers_result__isset __isset;

  void __set_success(const std::vector<int16_t> & val) {
    success = val;
  }

  bool operator == (const Hub_getMembers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Hub_getMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hub_getMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Hub_getMembers_presult__isset {
  _Hub_getMembers_presult__isset() : success(false) {}
  bool success;
} _Hub_getMembers_presult__isset;

class Hub_getMembers_presult {
 public:


  virtual ~Hub_getMembers_presult() throw() {}

  std::vector<int16_t> * success;

  _Hub_getMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HubClient : virtual public HubIf {
 public:
  HubClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HubClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void join(const int16_t port);
  void send_join(const int16_t port);
  void leave(const int16_t port);
  void send_leave(const int16_t port);
  void getMembers(std::vector<int16_t> & _return);
  void send_getMembers();
  void recv_getMembers(std::vector<int16_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HubProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HubIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HubProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leave(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HubProcessor(boost::shared_ptr<HubIf> iface) :
    iface_(iface) {
    processMap_["join"] = &HubProcessor::process_join;
    processMap_["leave"] = &HubProcessor::process_leave;
    processMap_["getMembers"] = &HubProcessor::process_getMembers;
  }

  virtual ~HubProcessor() {}
};

class HubProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HubProcessorFactory(const ::boost::shared_ptr< HubIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HubIfFactory > handlerFactory_;
};

class HubMultiface : virtual public HubIf {
 public:
  HubMultiface(std::vector<boost::shared_ptr<HubIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HubMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HubIf> > ifaces_;
  HubMultiface() {}
  void add(boost::shared_ptr<HubIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void join(const int16_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join(port);
    }
    ifaces_[i]->join(port);
  }

  void leave(const int16_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leave(port);
    }
    ifaces_[i]->leave(port);
  }

  void getMembers(std::vector<int16_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMembers(_return);
    }
    ifaces_[i]->getMembers(_return);
    return;
  }

};

} // namespace

#endif
