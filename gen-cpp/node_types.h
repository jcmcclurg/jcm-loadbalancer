/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef node_TYPES_H
#define node_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace mp3 {

typedef struct _Result__isset {
  _Result__isset() : job(false) {}
  bool job;
} _Result__isset;

class Result {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  Result() : job(0) {
  }

  virtual ~Result() throw() {}

  int16_t job;

  _Result__isset __isset;

  void __set_job(const int16_t val) {
    job = val;
  }

  bool operator == (const Result & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Result &a, Result &b);

typedef struct _Job__isset {
  _Job__isset() : id(false), hopcount(false) {}
  bool id;
  bool hopcount;
} _Job__isset;

class Job {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  Job() : id(0), hopcount(0) {
  }

  virtual ~Job() throw() {}

  int16_t id;
  int16_t hopcount;

  _Job__isset __isset;

  void __set_id(const int16_t val) {
    id = val;
  }

  void __set_hopcount(const int16_t val) {
    hopcount = val;
  }

  bool operator == (const Job & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(hopcount == rhs.hopcount))
      return false;
    return true;
  }
  bool operator != (const Job &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Job & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Job &a, Job &b);

typedef struct _MyError__isset {
  _MyError__isset() : message(false) {}
  bool message;
} _MyError__isset;

class MyError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  MyError() : message() {
  }

  virtual ~MyError() throw() {}

  std::string message;

  _MyError__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const MyError & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MyError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MyError &a, MyError &b);

} // namespace

#endif
