// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Node.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mp3;

class NodeHandler : virtual public NodeIf {
 public:
  NodeHandler() {
    // Your initialization goes here
  }

  void joinNotify(const int16_t port) {
    // Your implementation goes here
    printf("joinNotify\n");
  }

  void leaveNotify(const int16_t port) {
    // Your implementation goes here
    printf("leaveNotify\n");
  }

  int16_t getNumJobs() {
    // Your implementation goes here
    printf("getNumJobs\n");
  }

  void queueJob(const Job& job) {
    // Your implementation goes here
    printf("queueJob\n");
  }

  void processJobs(std::vector<Result> & _return) {
    // Your implementation goes here
    printf("processJobs\n");
  }

  void setBatchSize(const int16_t size) {
    // Your implementation goes here
    printf("setBatchSize\n");
  }

  int16_t getNumExtraJobs() {
    // Your implementation goes here
    printf("getNumExtraJobs\n");
  }

  void giveJobs(std::vector<Job> & _return, const int16_t numJobs) {
    // Your implementation goes here
    printf("giveJobs\n");
  }

  void notifyMutexRequest(const int16_t lamportTs, const int16_t fromPort) {
    // Your implementation goes here
    printf("notifyMutexRequest\n");
  }

  void notifyMutexReply(const int16_t fromPort) {
    // Your implementation goes here
    printf("notifyMutexReply\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NodeHandler> handler(new NodeHandler());
  shared_ptr<TProcessor> processor(new NodeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

